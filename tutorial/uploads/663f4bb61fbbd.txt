#include "mpi.h"
#include <stdio.h>
#include<iostream>
using namespace std;
#define NPROCS 12
Salutare cititorule ce mai faciiiii??????????
int findMax(int high, int low, int data[9])
{
	int i;
	int my_max = data[low];
	for (i = low + 1; i <= high; i++)
	{
		if (data[i] > my_max)
		{
			my_max = data[i];
		}
	}
	return my_max;
}

int findMin(int high, int low, int data[9])
{
	int i;
	int my_min = data[low];
	for (i = low + 1; i <= high; i++)
	{
		if (data[i] < my_min)
		{
			my_min = data[i];
		}
	}
	return my_min;
}

int computeSum(int high, int low, int data[9])
{
	int i;
	int sum = 0;
	for (i = low; i <= high; i++)
	{
		sum += data[i];
	}
	return sum;
}

int computeProd(int high, int low, int data[9])
{
	int i;
	int prod = 1;
	for (i = low; i <= high; i++)
	{
		prod *= data[i];
	}
	return prod;
}

int main(int argc, char* argv[])
{
	int rank, new_rank, sendbuf, recvbuf, numtasks,
		ranks1[3] = { 0,1,2 }, ranks2[3] = { 3,4,5 }, ranks3[3] = { 6,7,8 }, ranks4[3] = { 9,10,11 },
		data[9] = { 221,1,2,3,4,5,6,7,8 };
	int low, high;
	int nr_elem_per_proc = 3;
	int group_nr;
	int i;
	int my_max = -100, my_min = 100, my_sum = 0, my_prod = 1, global_max, global_min, global_sum, global_prod;

	MPI_Group orig_group, new_group;
	MPI_Comm new_comm;
	MPI_Init(&argc, &argv);
	MPI_Comm_rank(MPI_COMM_WORLD, &rank);
	MPI_Comm_size(MPI_COMM_WORLD, &numtasks);
	if (numtasks != NPROCS) {
		printf("Must specify MP_PROCS= %d. Terminating.\n", NPROCS);
		MPI_Finalize();
		return 0;
	}
	sendbuf = rank;
	/* Extract the original group handle */
	MPI_Comm_group(MPI_COMM_WORLD, &orig_group);
	/* Divide tasks into two distinct groups based upon rank */

	if (rank < NPROCS / 4)
	{
		MPI_Group_incl(orig_group, NPROCS / 4, ranks1, &new_group);
		group_nr = 1;
	}
	else
	{
		if (rank >= NPROCS / 4 && rank < NPROCS / 2)
		{
			MPI_Group_incl(orig_group, NPROCS / 4, ranks2, &new_group);
			group_nr = 2;
		}
		else
		{
			if (rank >= NPROCS / 2 && rank < 3 * NPROCS / 4)
			{
				MPI_Group_incl(orig_group, NPROCS / 4, ranks3, &new_group);
				group_nr = 3;
			}
			else
			{
				MPI_Group_incl(orig_group, NPROCS / 4, ranks4, &new_group);
				group_nr = 4;
			}
		}
	}
	///* Create new new communicator and then perform collective communications */
	MPI_Comm_create(MPI_COMM_WORLD, new_group, &new_comm);
	MPI_Group_rank(new_group, &new_rank);

	low = nr_elem_per_proc * new_rank;
	high = nr_elem_per_proc * (new_rank + 1) - 1;

	if (group_nr == 1)
	{
		my_max = findMax(high, low, data);
		MPI_Allreduce(&my_max, &global_max, 1, MPI_INT, MPI_MAX, new_comm);
		if (new_rank == 0)
		{
			cout << "Maximul global este: " << global_max << endl;
		}
	}
	else
	{
		if (group_nr == 2)
		{
			my_min = findMin(high, low, data);
			MPI_Allreduce(&my_min, &global_min, 1, MPI_INT, MPI_MIN, new_comm);
			if (new_rank == 0)
			{
				cout << "Minimul global este: " << global_min << endl;
			}
		}
		else
		{
			if (group_nr == 3)
			{
				my_prod = computeProd(high, low, data);
				MPI_Allreduce(&my_prod, &global_prod, 1, MPI_INT, MPI_PROD, new_comm);
				if (new_rank == 0)
				{
					cout << "Produsul global este: " << global_prod << endl;
				}
			}
			else
			{
				my_sum = computeSum(high, low, data);
				MPI_Allreduce(&my_sum, &global_sum, 1, MPI_INT, MPI_SUM, new_comm);
				if (new_rank == 0)
				{
					cout << "Suma globala este: " << global_sum << endl;
				}
			}
		}
	}
	MPI_Finalize();
}